@page "/create"
@using System
@using System.Text
@using RentACar.Shared.Models
@using System.Net.Http.Headers
@inject HttpClient Http
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper
@inject Blazor.Extensions.Storage.SessionStorage SessionStorage

<div class="field-container create-page-background">
    <div class="form-group">
        <label for="brand" class="control-label">Brand: </label>
        <input for="brand" bind="@Car.Brand" type="text" class="form-control format" />
    </div>
    <div class="form-group">
        <label for="model" class="control-label">Model: </label>
        <input for="model" bind="@Car.Model" type="text" class="form-control format" />
    </div>
    <div class="form-group">
        <label for="year" class="control-label">Year: </label>
        <input for="year" bind="@Car.Year" type="number" class="form-control format" />
    </div>
    <div class="form-group">
        <label for="engine" class="control-label">Engine: </label>
        <select class="form-control format" onchange="@OnEngineSelect">
            <option value="">-- Select Engine Type --</option>
            @foreach (var engineType in Enum.GetValues(typeof(EngineType)))
            {
                <option value="@engineType">@engineType</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="seats" class="control-label">Seat count: </label>
        <input for="seats" bind="@Car.Seats" type="number" class="form-control format" />
    </div>

    <input type="file" onchange="@UploadFile" id="getFileData" />

    <div class="form-group">
        <button type="submit" class="btn btn-default" onclick="@CreateCar">Save</button>
        <button class="btn" onclick="@Cancel">Cancel</button>
    </div>
    @if (!Success)
    {
        <div style="color: red">There was an error</div>
    }
    else if (Count > 0)
    {
        <div style="color: green">@Count car(s) added to you collection</div>
    }
</div>

@functions
{

    public List<ByteArrayContent> Pictures { get; set; } = new List<ByteArrayContent>();
    public Car Car { get; set; } = new Car();
    public int Count { get; set; }
    public bool Success { get; set; } = true;

    protected override async Task OnInitAsync()
    {
        var token = await SessionStorage.GetItem<string> ("token");
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
    }

    protected async Task CreateCar()
    {
        try
        {
            int carId = await Http.PostJsonAsync<int>("api/Cars/Create", Car);
            if (carId != 0)
                foreach (var picture in Pictures)
                    await Http.PostAsync($"/api/Cars/{carId}/AddPicture", picture);
        }
        catch
        {
            Success = false;
        }
        Count++;
            
    }

    async Task UploadFile()
    {
        var data = await JsInterop.GetFileData("getFileData");
        Pictures.Add(new ByteArrayContent(Convert.FromBase64String(data)));
    }

    protected void OnEngineSelect(UIChangeEventArgs engineChangeEvent)
    {
        EngineType engine;
        Enum.TryParse(engineChangeEvent.Value.ToString(), out engine);
        Car.Engine = engine;
    }

    protected void Cancel()
    {
        UriHelper.NavigateTo("/");
    }
}