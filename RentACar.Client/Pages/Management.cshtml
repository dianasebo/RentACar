@page "/management"
@using System.Net.Http.Headers
@using RentACar.Shared.Models
@inject HttpClient Http
@inject Blazor.Extensions.Storage.SessionStorage SessionStorage
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<h3 class="management-section-title">User management</h3>

@if (AllUsers != null)
{
    <div class="user-management">
        @foreach (User user in AllUsers)
        {
            <div class="entry user-entry-background">
                <p>@user.Lastname @user.Firstname - @user.Email</p>
                <div class="entry-buttons">
                    <button class="btn" data-toggle="modal" data-target="#edit-user-modal" onclick="@(() => SetUserToEdit(user))">Edit user</button>
                    <button class="btn" onclick="@(async () => await DeleteUserById(user.UserId))">Delete user</button>
                </div>
                <div class="clear-float"></div>
            </div>
        }
    </div>
}

<div id="edit-user-modal" class="modal fade" role="dialog" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">

            @if (UserToEdit != null)
            {
                <div class="modal-header">
                    <h5 class="modal-title">@UserToEdit.Lastname @UserToEdit.Firstname</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="lastname" class="control-label">Last name: </label>
                        <input required for="lastname" bind="@UserToEdit.Lastname" type="text" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="firstname" class="control-label">First name: </label>
                        <input required for="firstname" bind="@UserToEdit.Firstname" type="text" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="email" class="control-label">Email: </label>
                        <input required for="email" bind="@UserToEdit.Email" type="email" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="city" class="control-label">City: </label>
                        <input for="city" bind="@UserToEdit.City" type="text" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="address" class="control-label">Address: </label>
                        <input for="address" bind="@UserToEdit.Address" type="text" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn" data-dismiss="modal" onclick="@(async () => await SaveEditedUser())">Save</button>
                </div>
            }

        </div>
    </div>
</div>

<CarManagement ref="carManagement" Cars="@AllCars"></CarManagement>


@functions {

    private IEnumerable<User> AllUsers { get; set; }
    private IEnumerable<Car> AllCars { get; set; }

    private CarManagement carManagement;

    private User UserToEdit { get; set; }

    protected override async Task OnInitAsync()
    {
        var token = await SessionStorage.GetItem<string>("token");
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var currentUser = await SessionStorage.GetItem<User>("currentUser");
        if (currentUser != null && currentUser.IsAdmin)
        {
            AllUsers = await Http.GetJsonAsync<IEnumerable<User>>("api/Users/Index");
            AllCars = await Http.GetJsonAsync<IEnumerable<Car>>("api/Cars");
        }
        else
        {
            UriHelper.NavigateTo("/unauthorized");
        }
    }

    private async Task DeleteUserById(int userId)
    {
        AllUsers = AllUsers.Where(u => u.UserId != userId);
        AllCars = AllCars.Where(c => c.UserId != userId);
        await Http.DeleteAsync($"api/Users/Delete/{userId}");
        this.StateHasChanged();
        carManagement.Update();
    }

    private void SetUserToEdit(User user)
    {
        UserToEdit = user;
    }

    private async Task SaveEditedUser()
    {
        await Http.PutJsonAsync("api/Users/Edit", UserToEdit);
    }
}