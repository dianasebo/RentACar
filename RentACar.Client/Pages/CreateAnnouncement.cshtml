@page "/create"
@using System
@using System.Text
@using RentACar.Shared.Models
@using System.Net.Http.Headers
@inject HttpClient Http
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper
@inject Blazor.Extensions.Storage.SessionStorage SessionStorage

<div class="field-container create-page-background">
    <div class="form-group">
        <label for="brand" class="control-label">Brand: </label>
        <input for="brand" bind="@Car.Brand" type="text" class="form-control format" />
    </div>
    <div class="form-group">
        <label for="model" class="control-label">Model: </label>
        <input for="model" bind="@Car.Model" type="text" class="form-control format" />
    </div>
    <div class="form-group">
        <label for="year" class="control-label">Year: </label>
        <input for="year" bind="@Car.Year" type="number" class="form-control format" />
    </div>
    <div class="form-group">
        <label for="engine" class="control-label">Engine: </label>
        <select class="form-control format" onchange="@OnEngineSelect">
            <option value="">-- Select Engine Type --</option>
            @foreach (var engineType in Enum.GetValues(typeof(EngineType)))
            {
                <option value="@engineType">@engineType</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="seats" class="control-label">Seat count: </label>
        <input for="seats" bind="@Car.Seats" type="number" class="form-control format" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-default" onclick="@CreateCar">Save</button>
        <button class="btn" onclick="@Cancel">Cancel</button>
    </div>
    @if (AddedSuccesfully != null)
    {
        @if (AddedSuccesfully == true)
        {
            <div style="color: green"><em>Car added to you collection</em></div>
        }
        else
        {
            <div style="color: red"><em>There was an error</em></div>
        }
    }
</div>

@functions
{
    public Car Car { get; set; }
    public bool? AddedSuccesfully { get; set; }

    protected override async Task OnInitAsync()
    {
        var token = await SessionStorage.GetItem<string> ("token");
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
    }

    protected void OnEngineSelect(UIChangeEventArgs engineChangeEvent)
    {
        EngineType engine;
        Enum.TryParse(engineChangeEvent.Value.ToString(), out engine);
        Car.Engine = engine;
    }

    protected async Task CreateCar()
    {
        try
        {
            var requestJson = Json.Serialize(Car);
            var response = await Http.SendAsync(new HttpRequestMessage(HttpMethod.Post, "/api/Cars/Create")
            {
                Content = new StringContent(requestJson, Encoding.UTF8, "application/json")
            });
            response.EnsureSuccessStatusCode();
        }
        catch
        {
            AddedSuccesfully = false;
        }
        AddedSuccesfully = true;
    }

    protected void Cancel()
    {
        UriHelper.NavigateTo("/");
    }
}