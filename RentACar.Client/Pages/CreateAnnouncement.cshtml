@page "/create"
@using System
@using System.Linq
@using RentACar.Shared.Models
@using RentACar.Client.Services
@using System.Net.Http.Headers
@inject HttpClient Http
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper
@inject Blazor.Extensions.Storage.SessionStorage SessionStorage

<div class="create-page-background">

    <div class="field-container">

        <div class="form-group">
            <label for="brand" class="control-label"> Brand: </label>
            <input name="brand" bind="@Car.Brand" type="text" class="form-control" />
        </div>

        <div class="form-group">
            <label for="model" class="control-label"> Model: </label>
            <input name="model" bind="@Car.Model" type="text" class="form-control" />
        </div>

        <div class="form-group">
            <label for="year" class="control-label"> Year: </label>
            <input name="year" bind="@Car.Year" type="number" class="form-control" />
        </div>

        <div class="form-group">
            <label for="engine" class="control-label"> Engine: </label>
            <select class="form-control" onchange="@OnEngineSelect">
                <option value="">- Select Engine -</option>
                @foreach (var engineType in Enum.GetValues(typeof(EngineType)))
                {
                    <option value="@engineType">@engineType</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="seats" class="control-label"> Seat count: </label>
            <input name="seats" bind="@Car.Seats" type="number" class="form-control" />
        </div>

        @if (!Success)
        {
        <div style="color: red">There was an error</div>
        }
        else if (Count > 0)
        {
        <div style="color: green">@Count car(s) added to you collection</div>
        }

    </div>

    <div class="field-container">

        <div class="form-group">
            <label for="transmission" class="control-label"> Transmission: </label>
            <select class="form-control" onchange="@OnTransmissionSelect">
                <option value="">- Select Transmission -</option>
                @foreach (TransmissionType transmission in Enum.GetValues(typeof(TransmissionType)))
                {
                    <option value="@transmission">@transmission.GetName()</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="price" class="control-label"> Price/day (&euro;): </label>
            <input name="price" type="number" class="form-control" bind="@Car.Price" />
        </div>

        <div class="custom-control custom-checkbox">
            <input type="checkbox" class="custom-control-input" id="ac" bind="@Car.Ac" checked />
            <label class="custom-control-label" for="ac">AC</label>
        </div>

        <div class="form-group">
            <label for="images" class="control-label"> Images (up to 10 pictures, up to 1MB each): </label>
            <input id="upload" name="images" type="file" class="form-control" onchange="@(async () => await UploadPictures())" multiple accept=".jpg, .jpeg, .png, .webp" />
        </div>

        @if (DisplayPopup)
        {
            <div class="alert alert-primary" role="alert">
                Please wait while your pictures are being uploaded!
            </div>
        }
        @if (Pictures != null) 
        {
            <div class="alert alert-secondary" role="alert">
                @Pictures.Count() pictures have been successfuly uploaded.
            </div>
        }


        <div class="form-group">
            <button type="submit" class="btn" onclick="@(async () => await CreateCar())">Save</button>
        </div>

    </div>

    <div class="clear-float"></div>

</div>

@functions
{

    public IEnumerable<string> Pictures { get; set; }
    public Car Car { get; set; } = new Car();
    public int Count { get; set; }
    public bool Success { get; set; } = true;
    public bool DisplayPopup { get; set; } = false;

    protected override async Task OnInitAsync()
    {
        var token = await SessionStorage.GetItem<string>("token");
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
    }

    protected async Task CreateCar()
    {
        var currentUser = await SessionStorage.GetItem<User>("currentUser");
        Car.UserId = currentUser.UserId;

        var createCarRequest = new CreateCarRequest
                                {
                                    Car = Car,
                                    Pictures = Pictures
                                };
        var response = await Http.PostJsonAsync<GenericResponse>("api/Cars/Create", createCarRequest);

        if (response.IsSuccessful)
        {
            Pictures = Enumerable.Empty<string>();
            Success = true;
            Count++;
        } 
        else 
        {
            Success = false;
            Count = 0;
        }
    }

    protected async Task UploadPictures()
    {
        Pictures = await JsInterop.GetPicturesAsStrings("upload");
    }

    protected void OnEngineSelect(UIChangeEventArgs engineChangeEvent)
    {
        EngineType engine;
        Enum.TryParse(engineChangeEvent.Value.ToString(), out engine);
        Car.Engine = engine;
    }

    protected void OnTransmissionSelect(UIChangeEventArgs transmissionChangeEvent)
    {
        TransmissionType transmission;
        Enum.TryParse(transmissionChangeEvent.Value.ToString(), out transmission);
        Car.Transmission = transmission;
    }
}