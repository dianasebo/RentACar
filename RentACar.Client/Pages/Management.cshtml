@page "/management"
@using System.Net.Http.Headers
@using RentACar.Shared.Models
@inject HttpClient Http
@inject Blazor.Extensions.Storage.SessionStorage SessionStorage
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<h3 class="management-section-title">User management</h3>

@if (AllUsers != null)
{
    <div class="user-management">
        @foreach (User user in AllUsers)
        {
            <div class="entry user-entry-background">
                <p>@user.Lastname @user.Firstname - @user.Email</p>
                <div class="entry-buttons">
                    <button class="btn">Edit user</button>
                    <button class="btn" onclick="@(async () => await DeleteUserById(user.UserId))">Delete user</button>
                </div>
                <div class="clear-float"></div>
            </div>
        }
    </div>
}

<CarManagement Cars="@AllCars"></CarManagement>

@functions {

    private IEnumerable<User> AllUsers { get; set; }
    private IEnumerable<Car> AllCars { get; set; }

    protected override async Task OnInitAsync()
    {        
        var token = await SessionStorage.GetItem<string>("token");
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var currentUser = await SessionStorage.GetItem<User>("currentUser");
        if (currentUser != null && currentUser.IsAdmin)
        {
            AllUsers = await Http.GetJsonAsync<IEnumerable<User>>("api/Users/Index");
            AllCars = await Http.GetJsonAsync<IEnumerable<Car>>("api/Cars");
        }
        else
        {
            UriHelper.NavigateTo("/unauthorized");
        }
    }

    private async Task DeleteUserById(int userId)
    {
        AllUsers = AllUsers.Where(u => u.UserId != userId);
        AllCars = AllCars.Where(c => c.User.UserId != userId);
        await Http.DeleteAsync($"api/Users/Delete/{userId}");
        this.StateHasChanged();
    }
}